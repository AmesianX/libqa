{{# partial "title" }}Feed{{/partial}}

{{# partial "content" }}
<div class="container">
    <div class="col-md-12 col-xs-12">
        <!-- feed 글 쓰기 start -->
        <form id="feedForm">
        <div class="feed feed-write well">
            <ul>
                <li>
                    <div class="author">
                        <div class="user-profile">
                            <img alt="avatar" class="profile-image" src="/resource/images/avatar.png" />
                        </div>
                    </div>
                    <div class="write-box">
                        <textarea class="form-control" name="feedContent" rows="6" placeholder="오늘 있었던 일을 동료와 공유해주세요"></textarea>
                    </div>
                    <div class="attachmentArea">
                        <div class="images text-left"></div>
                        <div class="files">&nbsp;</div>
                    </div>
                </li>
            </ul>

            <div class="feed-write-bottom">
                <button class="btn btn-primary btn-feed-image" type="button" data-toggle="modal" data-target="#fileUploadModal">이미지 및 파일첨부</button>
                <button class="btn btn-info pull-right btn-feed-save" type="button" id="feedSave">저장</button>
            </div>
        </div>
        </form>
        <!-- feed 글 쓰기 end -->

        <!-- feed 글 목록 start -->
        <div class="feed well">
            <ul id="feedList">로딩 중...</ul>
            <button class="btn btn-default form-control btn-feed-more" type="button" id="feedMoreBtn">more</button>
        </div>
        <!-- feed 글 목록 end -->
        
        <div id="right-panel-container">
            <a id="right-panel-link" href="#right-panel"><i class="fa fa-bars fa-3x"></i></a>
        </div>
    </div>
</div>

<!-- file upload start -->
<div class="modal fade" id="fileUploadModal" tabindex="-1" role="dialog" aria-hidden="true" aria-labelledby="fileUploadModalLabel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="fileUploadModalLabel">이미지 및 파일 첨부</h4>
            </div>
            <div class="modal-body">
                <div class="feed well">
                    <form class="form-horizontal attachmentForm" role="form" id="feedFileForm">
                        <div class="form-group">
                            <input id="uploadfile" type="file" name="uploadfile" accept="*" style="display:none">
                            <label for="fileAttachmentInput" class="col-sm-2 control-label">첨부파일</label>

                            <div class="col-sm-10 col-md-10">
                                <div class="row">
                                    <div class="col-sm-9 col-xs-9 col-md-9">
                                        <input id="fileAttachmentInput" class="form-control" type="text" />
                                    </div>
                                    <div class="col-sm-3 col-xs-3 col-md-3">
                                        <button class="btn btn-info btn-default" type="button" onclick="$('#uploadfile').click();">선택</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group image-options">
                            <label class="col-sm-2 col-md-2 control-label">미리보기</label>

                            <div class="col-sm-10 col-md-10">
                                <img src="https://octodex.github.com/images/droctocat.png" alt="이미지 미리보기" class="img-thumbnail image-preview">
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">취소</button>
            </div>
        </div>
    </div>
</div>
<!-- file upload modal end -->

<!-- popover-config start -->
<div id="popover-config-content" style="display: none;">
    <div class="button"><a href="#">수정</a></div>
    <div class="button"><a href="javascript:void(0);" onclick="Feed.removeItem(this);">삭제</a></div>
</div>
<div id="popover-feed-image-content" style="display: none;">
    <div class="file_upload"><a href="#">파일 업로드</a></div>
    <div class="web_link"><a href="#">웹 링크</a></div>
</div>
<!-- popover-config end -->
{{/partial}}

{{# partial "script-page" }}
    <script type="text/javascript">
        var Feed = {
            'init' : function() {
                this.initModal();
                this.bindSave();
                this.bindAttachment();
                this.loadList();
            },
            'loadList' : function() {
                this._callList("/feed/list", function(html, itemSize) {
                    $('#feedList').html(html);
                    FeedPager.init(itemSize);
                });
            },
            'moreList' : function() {
                this._callList("/feed/list?lastFeedId=" + this.getLastFeedId(), function(html, itemSize) {
                    $('#feedList').append(html);
                    FeedPager.loaded(itemSize);
                });
            },
            '_callList' : function(url, resultHandleCallback) {
                $.get(url, function (response) {
                    if(response.resultCode != 1) {
                        alert(response.comment);
                        return;
                    }
                    var source = $('#feed-list-hbs').html();
                    var template = Handlebars.compile(source);
                    var html = template(response);
                    resultHandleCallback(html, response.data.length);
                });
            },
            'getId': function($target) {
                return $target.closest('.thread').data('feedId');
            },
            'bindSave' : function() {
                var me = this;
                $('#feedSave').click(function(){
                    if(!me.checkValidate()) {
                        return;
                    }
                    $.post('/feed/save', $('#feedForm').serialize())
                        .done(function(response){
                            if(response.resultCode != 1) {
                                alert(response.comment);
                                return;
                            }

                            me.loadList();
                            me.clearForm();
                            FeedFile.clear();
                        }).fail(function(){
                            alert('Error saving feed');
                        });
                });
            },
            'clearForm' : function() {
                $('#feedForm').find('textarea').val('');
            },
            'checkValidate' : function() {
                var $frm = $('#feedForm');
                if (!$frm.find('textarea[name=feedContent]').val().trim().length) {
                    alert('feed를 입력해주세요!');
                    return false;
                }
                return true;
            },
            'bindAttachment': function () {
                $('#uploadfile').change(function(){
                    $('#fileAttachmentInput').val($('#uploadfile').val());
                    
                    var $feedFileForm = $("#feedFileForm");
                    $.ajax({
                        url: "/common/uploadFile",
                        type: "POST",
                        data: new FormData($feedFileForm[0]),
                        enctype: 'multipart/form-data',
                        processData: false,
                        contentType: false,
                        cache: false,
                        success: function (req) {
                            FeedFile.add(req.data);
                            $('#fileUploadModal').modal('hide');
                        },
                        error: function () {
                            alert('업로드 중 에러가 발생했습니다. 파일 용량이 허용범위를 초과 했거나 올바르지 않은 파일 입니다.');
                        }
                    });
                });
            },
            'initModal': function() {
                $('#fileUploadModal').on('show.bs.modal', function () {
                    $('#fileAttachmentInput').val('');
                });
            },
            'removeItem': function(el) {
                if (!confirm("FEED를 삭제하시겠습니까?")) {
                    return;
                }
                var popoverId = $(el).closest('.popover').attr('id');
                var $popOverBody = $('.thread .config').find('[aria-describedby='+ popoverId +']');
                var feedId =  this.getId($popOverBody);
                $.post('/feed/' + feedId + '/delete')
                    .done(function (response) {
                        if (response.resultCode != 1) {
                            alert(response.comment);
                            return;
                        }
                        $('#' + popoverId).remove();
                        $('#feedList li.thread[data-feed-id="'+feedId+'"]').remove();
                    }).fail(function () {
                        alert('Error delete feed');
                    });
            },
            'like': function(el) {
                $.post('/feed/' + this.getId($(el)) + '/like')
                    .done(function (response) {
                        if (response.resultCode != 1) {
                            alert(response.comment);
                            return;
                        }
                        FeedUtil.toggleCount($(el), response.data.count, response.data.hasViewer);
                    }).fail(function () {
                        alert('Error like feed');
                    });
            },
            'claim': function(el) {
                $.post('/feed/' + this.getId($(el)) + '/claim')
                    .done(function (response) {
                        if (response.resultCode != 1) {
                            alert(response.comment);
                            return;
                        }
                        FeedUtil.toggleCount($(el), response.data.count, response.data.hasViewer);
                    }).fail(function () {
                        alert('Error claim feed');
                    });
            },
            'getLastFeedId': function() {
                return $('#feedList li.thread').last().data('feedId');
            }
        };

        var FeedFile = {
            'add': function(fileObj) {
                this.addPreviewToForm(fileObj);
                this.addHiddenInputToForm(fileObj);
            },
            'clear': function(){
                this.removePreviewInForm();
                this.removeHiddenTagsInForm();
            },
            'addPreviewToForm': function (obj) {
                var fullPath = obj.filePath + '/' + obj.savedName;

                if(obj.fileType == 'FILE') {
                    var $file = ' <a href="' + fullPath + '" target="_blank"><i class="fa fa-file-o"></i> ' + obj.realName + '</a>';
                    $('#feedForm .attachmentArea .files').append($file);
                } else {
                    var $image = ' <img width="190" class="img-thumbnail" src="' + fullPath + '">';
                    $('#feedForm .attachmentArea .images').append($image);
                }
            },
            'addHiddenInputToForm': function (obj) {
                var idx = $('#feedForm input[name$=fileType]').size();
                var $input = $('<input />').attr('type', 'hidden');

                $('#feedForm').append($input.clone().attr('name', "feedFiles["+ idx + "].realName").val(obj.realName))
                    .append($input.clone().attr('name', "feedFiles["+ idx + "].savedName").val(obj.savedName))
                    .append($input.clone().attr('name', "feedFiles["+ idx + "].filePath").val(obj.filePath))
                    .append($input.clone().attr('name', "feedFiles["+ idx + "].fileSize").val(obj.fileSize))
                    .append($input.clone().attr('name', "feedFiles["+ idx + "].fileType").val(obj.fileType));
            },
            'removePreviewInForm': function() {
                $('#feedForm .attachmentArea .files').empty();
                $('#feedForm .attachmentArea .images').empty();
                $('#feedForm input[name^=feedFiles]').remove();
            },
            'removeHiddenTagsInForm': function() {
                $('#feedForm input[name^=feedFiles]').remove();
            }
        };

        var FeedReply = {
            'init' : function(){
                this.bindSave();
            },
            'getId' : function($target){
                return $target.closest('.reply-thread').data('feedReplyId');
            },
            'bindSave' : function() {
                var me = this;
                $('button[name=saveReply]').on('click',function () {
                    var $frm = $(this).closest('form');
                    if(!me.checkValidate($frm)) {
                        return;
                    }
                    $.post('/feed/reply/save', $frm.serialize())
                        .done(function (response) {
                            if (response.resultCode != 1) {
                                alert(response.comment);
                                return;
                            }

                            me.clearForm($frm);
                            me.loadItem(response.data);
                        }).fail(function () {
                            alert('Error saving feed Reply');
                        });
                });
            },
            'loadItem': function(data){
                var source = $('#feed-reply-hbs').html();
                var template = Handlebars.compile(source);
                var html = template(data);
                $('#feed-replies').append(html);
            },
            'checkValidate': function($frm) {
                if (!$frm.find('input[name=feedReplyContent]').val().trim().length) {
                    alert('댓글을 입력해주세요!');
                    return false;
                }
                return true;
            },
            'clearForm': function($frm) {
                $frm.find('input[name=feedReplyContent]').val('');
            },
            'removeItem' : function(el) {
                if (!confirm("댓글을 삭제하시겠습니까?")) {
                    return;
                }

                var feedReplyId = this.getId($(el));
                var $target = $(el).closest('.reply-thread');
                $.post('/feed/reply/' + feedReplyId + '/delete')
                    .done(function (response) {
                        if (response.resultCode != 1) {
                            alert(response.comment);
                            return;
                        }
                        $target.remove();
                    }).fail(function () {
                        alert('Error delete feed Reply');
                    });
            },
            'like' : function(el) {
                $.post('/feed/reply/' + this.getId($(el)) + '/like')
                    .done(function (response) {
                        if (response.resultCode != 1) {
                            alert(response.comment);
                            return;
                        }
                        FeedUtil.toggleCount($(el), response.data.count, response.data.hasViewer);
                    }).fail(function () {
                        alert('Error like feed');
                    });
            },
            'claim' : function(el) {
                $.post('/feed/reply/' + this.getId($(el)) + '/claim')
                    .done(function (response) {
                        if (response.resultCode != 1) {
                            alert(response.comment);
                            return;
                        }
                        FeedUtil.toggleCount($(el), response.data.count, response.data.hasViewer);
                    }).fail(function () {
                        alert('Error claim feed');
                    });
            }
        };

        var FeedUtil = {
            'bindPopOver': function() {
                $('.popover-config').popover({
                    trigger: 'click',
                    html: true,
                    content: function () {
                        return $('#popover-config-content').html();
                    }
                });

                $('.popover-feed-image').popover({
                    trigger: 'click',
                    html: true,
                    content: function () {
                        return $('#popover-feed-image-content').html();
                    }
                });
            },
            'toggleCount': function(el, count, hasViewer) {
                el.find('span').html('('+count+')');
                if(hasViewer) {
                    el.addClass('hasViewer');
                }  else {
                    el.removeClass('hasViewer');
                }
            }
        };

        var FeedPager = {
            '$button': $('#feedMoreBtn'),
            'lastFeedId': null,
            'PAGE_SIZE': 5,
            'init': function(itemSize) {
                if(itemSize > 0) {
                    this.showBtn();
                    this.bindLoading();
                } else {
                    this.hideBtn();
                }
            },
            'showBtn' : function() {
                this.$button.show();
            },
            'hideBtn' : function() {
                this.$button.hide();
            },
            'toggleLoadingText': function(loading) {
                if(loading) {
                    this.$button.prop('disabled', true).html('로딩 중...');
                } else {
                    this.$button.prop('disabled', false).html('more');
                }
            },
            'bindLoading': function() {
                var me = this;
                this.$button.on('click', function(){
                    me.toggleLoadingText(true);
                    Feed.moreList();
                });
            },
            'loaded': function(itemSize) {
                this.toggleLoadingText(false);
                if(itemSize < this.PAGE_SIZE) {
                    this.hideBtn();
                }
            }
        };
        
    $(function(){
        Feed.init();
    });
    </script>
{{/partial}}

{{embedded "feed/list"}}
{{embedded "feed/reply"}}

{{> template/base}}
